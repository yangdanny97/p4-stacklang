load i - copy stack position i to top of stack
store i - pop top of stack and store it at position i
push i - push i on top of stack
drop - throw away the top of the stack
add - pop and add 2 things on top of stack, push sum
mul - "
sub - "
neg - negates top of stack
reset - eq to dropall
# boolean operators: outputs 0 or 1 to top of stack, positive numbers are truthy, negative numbers are falsy
and - 
or - 
gt - 
lt - 
lte - 
gte - 
eq - 
neq - 


dup - duplicate top of stack ( a -- a a )
swap - swap top 2 things in stack ( a b -- b a )
over - copy 2nd from top onto top ( a b -- a b a )
rot - ( a b c -- b c a )
jump i - set PC to i
pjump i - consume top of stack, set PC to i if value == 1
done

stack
stackptr
ins
insptr
error
done

